{
  "_from": "prequest",
  "_id": "prequest@1.0.0",
  "_inBundle": false,
  "_integrity": "sha1-fx8DQlZK3Xdbgl27+vAPxkWAluc=",
  "_location": "/prequest",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "prequest",
    "fetchSpec": "latest",
    "name": "prequest",
    "raw": "prequest",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/prequest/-/prequest-1.0.0.tgz",
  "_shasum": "7f1f0342564add775b825dbbfaf00fc6458096e7",
  "_spec": "prequest",
  "_where": "C:\\Users\\User\\Desktop\\фвафыв",
  "author": {
    "name": "Alyssa Quek"
  },
  "bugs": {
    "url": "https://github.com/alyssaq/prequest/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bluebird": "^3.0.5",
    "object-assign": "^2.1.1",
    "request": "^2.53.0"
  },
  "deprecated": false,
  "description": "Promisified HTTP requests with `bluebird` and `request` modules.",
  "devDependencies": {
    "body-parser": "^1.12.0",
    "express": "^4.12.0",
    "grunt": "^0.4.5",
    "grunt-cafe-mocha": "^0.1.13",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-jshint": "^0.11.0",
    "grunt-express-server": "^0.4.19",
    "mocha": "^2.1.0"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "https://github.com/alyssaq/prequest#readme",
  "keywords": [
    "bluebird",
    "http",
    "prequest",
    "promise",
    "promise"
  ],
  "license": "MIT",
  "main": "prequest.js",
  "name": "prequest",
  "optionalDependencies": {},
  "readme": "# prequest\n[![Build Status](https://travis-ci.org/alyssaq/prequest.png?branch=master)](https://travis-ci.org/alyssaq/prequest)\n\nPromisified HTTP requests with [`bluebird`](https://github.com/petkaantonov/bluebird/blob/master/API.md) and [`request`](https://github.com/mikeal/request) modules.\n\n## Grab it\n\n    $ npm install prequest\n\n## prequest usage\n#### GET example\nWith this wrapper, we can easily make requests and catch any http failures in a promise's catch. By default, method is `GET`:\n```js\nvar prequest = require('prequest');\n\nprequest('http://localhost:4567/api').then(function (body) {\n  console.log('Success!');\n}).catch(function (err) { // Any HTTP status >= 400 falls here\n  console.error('Failed.', err.statusCode, ' >= 400');\n});\n\n```\n\nIf you need the full response (e.g. to view headers), specify `arrayResponse: true` to have the response and body in an array. You may use bluebird's `spread` to access the items directly:\n```js\nprequest({\n  url:'http://localhost:4567/api',\n  arrayResponse: true\n}).spread(response, body) {\n  console.log('Success!', response.headers, body);\n});\n```\n\n#### POST example\nAll options supported by [`request`](https://github.com/mikeal/request) can be supplied to prequest.\nBy default, `json: true` is enabled to set body payload as a JSON representation. If you do not want this, simply override it to false.\n```js\nvar prequest = require('prequest');\n\nprequest({\n  method: 'POST',\n  url:'http://localhost:4567/api',\n  body: {\n    someData: [1, 2, 3]\n  }\n}).then(body) {\n  console.log('Success!',  body);\n}).catch(function (err) { // Any HTTP status >= 400 falls here\n  console.error('Failed.', err.statusCode, ' >= 400');\n});\n```\n\nTo use the other methods: [delete, patch, head], specify it in method.\n\n## Testing\n\nTo run the tests:\n\n    $ npm install\n    $ npm test\n\n## The past, without prequest\nWithout this wrapper, a common pattern to `promisify` requests:\n```js\nvar Promise = require('bluebird');\nvar prequest = Promise.promisify(require('request'));\n\nprequest(url).then(function (response) {\n  if (reponse.statusCode === 200) {\n    // continue;\n  } else if (reponse.statusCode >= 500) {\n    // handle this error case\n  } else if (reponse.statusCode >= 400) {\n    // you get the point...\n  }\n}).catch(function (err) {\n  console.error(err);\n  // network issue\n})\n```\n## Contribute\n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -m 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request :D\n\n## License\n[MIT](http://alyssaq.github.io/mit-license/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/alyssaq/prequest.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "1.0.0"
}
